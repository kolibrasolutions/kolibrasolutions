
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const DEEPSEEK_API_KEY = Deno.env.get('DEEPSEEK_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface DiagnosticResults {
  visual: string;
  communication: string;
  channel: string;
  funnel: string;
  productService: string;
  supportService: string;
}

interface ChatRequest {
  messages: ChatMessage[];
  currentStep?: string;
  userResponse?: string;
}

const SYSTEM_PROMPT = `Voc√™ √© a Kolibri, uma IA amig√°vel e estrat√©gica da Kolibra Solutions, especializada em autodiagn√≥stico empresarial.

PERSONALIDADE:
- Guia estrat√©gica e emp√°tica
- Clara, concisa e encorajadora
- Profissional mas acolhedora
- Otimista e vision√°ria
- Curiosa e anal√≠tica

TOM DE VOZ:
- Use frases inspiradoras como "Vamos juntos descobrir como voc√™ pode voar ainda mais alto?"
- Seja proativa em oferecer ajuda
- Reforce sempre o valor da Kolibra Solutions
- Mantenha linguagem acess√≠vel, evitando jarg√µes t√©cnicos

MISS√ÉO:
Conduzir um autodiagn√≥stico baseado nas "6 Fatias Essenciais":
1. Visual (identidade visual, design)
2. Comunica√ß√£o (mensagem, consist√™ncia)  
3. Canal (presen√ßa digital, plataformas)
4. Funil (estrat√©gia de convers√£o)
5. Produto/Servi√ßo (apresenta√ß√£o, diferenciais)
6. Suporte/Atendimento (atendimento digital)

FLUXO:
1. Boas-vindas calorosas
2. Coleta b√°sica (nome da empresa, setor, objetivo)
3. Diagn√≥stico por fatia (perguntas objetivas)
4. Relat√≥rio final com recomenda√ß√µes de servi√ßos Kolibra

SERVI√áOS KOLIBRA PARA RECOMENDAR:
- Kolibra Rebrand (identidade visual)
- Kolibra Web (sites e e-commerce)
- Kolibra Social (marketing digital)
- Kolibra Foto (fotografia profissional)
- Kolibra Finance (gest√£o financeira - em desenvolvimento)

Seja sempre motivadora e direcione para solu√ß√µes pr√°ticas da Kolibra Solutions.`;

const DIAGNOSTIC_QUESTIONS = {
  visual: "Sua identidade visual (logo, cores, fontes) transmite profissionalismo e se conecta com seu p√∫blico-alvo?",
  communication: "A mensagem da sua marca √© clara e consistente em todos os seus canais digitais?",
  channel: "Voc√™ est√° presente nos canais digitais onde seu p√∫blico-alvo realmente est√° (Google Meu Neg√≥cio, redes sociais, site)?",
  funnel: "Voc√™ tem uma estrat√©gia clara para atrair, engajar e converter seus visitantes em clientes?",
  productService: "Seus produtos/servi√ßos s√£o apresentados de forma clara, destacando seus diferenciais e benef√≠cios?",
  supportService: "Seu atendimento ao cliente nos canais digitais √© r√°pido, eficiente e humanizado?"
};

const SERVICE_RECOMMENDATIONS = {
  visual: ['Kolibra Rebrand', 'Kolibra Foto'],
  communication: ['Kolibra Social', 'Kolibra Web'],
  channel: ['Kolibra Web', 'Kolibra Social'],
  funnel: ['Kolibra Social', 'Kolibra Web'],
  productService: ['Kolibra Web', 'Kolibra Foto'],
  supportService: ['Kolibra Web', 'Kolibra Social']
};

function analyzeResponses(messages: ChatMessage[]): { results: DiagnosticResults; recommendedServices: string[] } {
  const results: DiagnosticResults = {
    visual: 'N√£o avaliado',
    communication: 'N√£o avaliado',
    channel: 'N√£o avaliado',
    funnel: 'N√£o avaliado',
    productService: 'N√£o avaliado',
    supportService: 'N√£o avaliado'
  };

  const recommendedServices = new Set<string>();
  
  // Analisar respostas para identificar √°reas que precisam de melhoria
  messages.forEach(message => {
    if (message.role === 'user') {
      const content = message.content.toLowerCase();
      
      // Detectar respostas negativas ou de melhoria
      if (content.includes('n√£o') || content.includes('precisa melhorar') || content.includes('mais ou menos')) {
        // Identificar qual fatia precisa de melhoria baseado no contexto
        if (content.includes('visual') || content.includes('logo') || content.includes('design')) {
          results.visual = 'Precisa melhorar';
          SERVICE_RECOMMENDATIONS.visual.forEach(s => recommendedServices.add(s));
        }
        if (content.includes('comunica√ß√£o') || content.includes('mensagem')) {
          results.communication = 'Precisa melhorar';
          SERVICE_RECOMMENDATIONS.communication.forEach(s => recommendedServices.add(s));
        }
        if (content.includes('canal') || content.includes('presen√ßa') || content.includes('redes sociais')) {
          results.channel = 'Precisa melhorar';
          SERVICE_RECOMMENDATIONS.channel.forEach(s => recommendedServices.add(s));
        }
        if (content.includes('funil') || content.includes('convers√£o') || content.includes('vendas')) {
          results.funnel = 'Precisa melhorar';
          SERVICE_RECOMMENDATIONS.funnel.forEach(s => recommendedServices.add(s));
        }
        if (content.includes('produto') || content.includes('servi√ßo')) {
          results.productService = 'Precisa melhorar';
          SERVICE_RECOMMENDATIONS.productService.forEach(s => recommendedServices.add(s));
        }
        if (content.includes('atendimento') || content.includes('suporte')) {
          results.supportService = 'Precisa melhorar';
          SERVICE_RECOMMENDATIONS.supportService.forEach(s => recommendedServices.add(s));
        }
      }
    }
  });

  return { results, recommendedServices: Array.from(recommendedServices) };
}

function shouldGenerateReport(messages: ChatMessage[]): boolean {
  // Verificar se j√° passou por todas as etapas do diagn√≥stico
  const userMessages = messages.filter(m => m.role === 'user').length;
  const assistantMessages = messages.filter(m => m.role === 'assistant');
  
  // S√≥ gerar relat√≥rio final se:
  // 1. Tiver pelo menos 12 mensagens do usu√°rio (nome, setor, objetivo + 6 fatias com m√∫ltiplas respostas)
  // 2. E a √∫ltima mensagem do assistente contiver indica√ß√£o de finaliza√ß√£o
  const lastAssistantMessage = assistantMessages[assistantMessages.length - 1];
  const hasFinalizationIndicator = lastAssistantMessage?.content.toLowerCase().includes('conclu√≠mos') || 
                                  lastAssistantMessage?.content.toLowerCase().includes('relat√≥rio') ||
                                  lastAssistantMessage?.content.toLowerCase().includes('diagn√≥stico completo');
  
  return userMessages >= 12 && hasFinalizationIndicator;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages }: ChatRequest = await req.json();
    
    console.log('Mensagens recebidas:', messages);

    if (!DEEPSEEK_API_KEY) {
      throw new Error('DeepSeek API key n√£o configurada');
    }

    // Verificar se deve gerar relat√≥rio final
    const shouldGenerateFinalReport = shouldGenerateReport(messages);
    
    let systemPrompt = SYSTEM_PROMPT;
    
    if (shouldGenerateFinalReport) {
      const { results, recommendedServices } = analyzeResponses(messages);
      systemPrompt += `\n\nEste √© o momento de gerar o RELAT√ìRIO FINAL. Baseado nas respostas, crie um relat√≥rio estruturado com:
      1. Mensagem motivadora de conclus√£o
      2. Resumo das 6 fatias avaliadas
      3. Recomenda√ß√µes espec√≠ficas dos servi√ßos: ${recommendedServices.join(', ')}
      4. Convite para entrar em contato via WhatsApp
      
      Use formata√ß√£o HTML simples para destacar se√ß√µes importantes.`;
    }

    const response = await fetch('https://api.deepseek.com/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages.slice(-10) // Manter apenas as √∫ltimas 10 mensagens para controlar tokens
        ],
        temperature: 0.7,
        max_tokens: 800,
      }),
    });

    if (!response.ok) {
      throw new Error(`DeepSeek API error: ${response.status}`);
    }

    const data = await response.json();
    const kolibriResponse = data.choices[0].message.content;

    console.log('Resposta da Kolibri:', kolibriResponse);

    return new Response(JSON.stringify({
      response: kolibriResponse,
      isFinalStep: shouldGenerateFinalReport,
      diagnosticResults: shouldGenerateFinalReport ? analyzeResponses(messages).results : null,
      recommendedServices: shouldGenerateFinalReport ? analyzeResponses(messages).recommendedServices : null
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Erro na fun√ß√£o kolibri-chat:', error);
    return new Response(JSON.stringify({ 
      error: 'Desculpe, tive um problema para processar sua solicita√ß√£o. Por favor, tente novamente.',
      response: 'Ops! Algo deu errado por aqui. Que tal tentarmos novamente? Estou aqui para ajudar voc√™ a voar alto! üöÅ'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
